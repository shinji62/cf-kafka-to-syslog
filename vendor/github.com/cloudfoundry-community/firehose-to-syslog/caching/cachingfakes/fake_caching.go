// Code generated by counterfeiter. DO NOT EDIT.
package cachingfakes

import (
	"sync"

	"github.com/cloudfoundry-community/firehose-to-syslog/caching"
)

type FakeCaching struct {
	OpenStub        func() error
	openMutex       sync.RWMutex
	openArgsForCall []struct{}
	openReturns     struct {
		result1 error
	}
	openReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllAppsStub        func() (map[string]*caching.App, error)
	getAllAppsMutex       sync.RWMutex
	getAllAppsArgsForCall []struct{}
	getAllAppsReturns     struct {
		result1 map[string]*caching.App
		result2 error
	}
	getAllAppsReturnsOnCall map[int]struct {
		result1 map[string]*caching.App
		result2 error
	}
	GetAppStub        func(string) (*caching.App, error)
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct {
		arg1 string
	}
	getAppReturns struct {
		result1 *caching.App
		result2 error
	}
	getAppReturnsOnCall map[int]struct {
		result1 *caching.App
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCaching) Open() error {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct{}{})
	fake.recordInvocation("Open", []interface{}{})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.openReturns.result1
}

func (fake *FakeCaching) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeCaching) OpenReturns(result1 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCaching) OpenReturnsOnCall(i int, result1 error) {
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCaching) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeCaching) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeCaching) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCaching) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCaching) GetAllApps() (map[string]*caching.App, error) {
	fake.getAllAppsMutex.Lock()
	ret, specificReturn := fake.getAllAppsReturnsOnCall[len(fake.getAllAppsArgsForCall)]
	fake.getAllAppsArgsForCall = append(fake.getAllAppsArgsForCall, struct{}{})
	fake.recordInvocation("GetAllApps", []interface{}{})
	fake.getAllAppsMutex.Unlock()
	if fake.GetAllAppsStub != nil {
		return fake.GetAllAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAllAppsReturns.result1, fake.getAllAppsReturns.result2
}

func (fake *FakeCaching) GetAllAppsCallCount() int {
	fake.getAllAppsMutex.RLock()
	defer fake.getAllAppsMutex.RUnlock()
	return len(fake.getAllAppsArgsForCall)
}

func (fake *FakeCaching) GetAllAppsReturns(result1 map[string]*caching.App, result2 error) {
	fake.GetAllAppsStub = nil
	fake.getAllAppsReturns = struct {
		result1 map[string]*caching.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCaching) GetAllAppsReturnsOnCall(i int, result1 map[string]*caching.App, result2 error) {
	fake.GetAllAppsStub = nil
	if fake.getAllAppsReturnsOnCall == nil {
		fake.getAllAppsReturnsOnCall = make(map[int]struct {
			result1 map[string]*caching.App
			result2 error
		})
	}
	fake.getAllAppsReturnsOnCall[i] = struct {
		result1 map[string]*caching.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCaching) GetApp(arg1 string) (*caching.App, error) {
	fake.getAppMutex.Lock()
	ret, specificReturn := fake.getAppReturnsOnCall[len(fake.getAppArgsForCall)]
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetApp", []interface{}{arg1})
	fake.getAppMutex.Unlock()
	if fake.GetAppStub != nil {
		return fake.GetAppStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppReturns.result1, fake.getAppReturns.result2
}

func (fake *FakeCaching) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeCaching) GetAppArgsForCall(i int) string {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return fake.getAppArgsForCall[i].arg1
}

func (fake *FakeCaching) GetAppReturns(result1 *caching.App, result2 error) {
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 *caching.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCaching) GetAppReturnsOnCall(i int, result1 *caching.App, result2 error) {
	fake.GetAppStub = nil
	if fake.getAppReturnsOnCall == nil {
		fake.getAppReturnsOnCall = make(map[int]struct {
			result1 *caching.App
			result2 error
		})
	}
	fake.getAppReturnsOnCall[i] = struct {
		result1 *caching.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCaching) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getAllAppsMutex.RLock()
	defer fake.getAllAppsMutex.RUnlock()
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCaching) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ caching.Caching = new(FakeCaching)
