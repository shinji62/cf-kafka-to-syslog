// This file was generated by counterfeiter
package loggingfakes

import (
	"sync"

	"github.com/cloudfoundry-community/firehose-to-syslog/logging"
)

type FakeLogging struct {
	ConnectStub        func() bool
	connectMutex       sync.RWMutex
	connectArgsForCall []struct{}
	connectReturns     struct {
		result1 bool
	}
	ShipEventsStub        func(map[string]interface{}, string)
	shipEventsMutex       sync.RWMutex
	shipEventsArgsForCall []struct {
		arg1 map[string]interface{}
		arg2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogging) Connect() bool {
	fake.connectMutex.Lock()
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct{}{})
	fake.recordInvocation("Connect", []interface{}{})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub()
	} else {
		return fake.connectReturns.result1
	}
}

func (fake *FakeLogging) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeLogging) ConnectReturns(result1 bool) {
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLogging) ShipEvents(arg1 map[string]interface{}, arg2 string) {
	fake.shipEventsMutex.Lock()
	fake.shipEventsArgsForCall = append(fake.shipEventsArgsForCall, struct {
		arg1 map[string]interface{}
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ShipEvents", []interface{}{arg1, arg2})
	fake.shipEventsMutex.Unlock()
	if fake.ShipEventsStub != nil {
		fake.ShipEventsStub(arg1, arg2)
	}
}

func (fake *FakeLogging) ShipEventsCallCount() int {
	fake.shipEventsMutex.RLock()
	defer fake.shipEventsMutex.RUnlock()
	return len(fake.shipEventsArgsForCall)
}

func (fake *FakeLogging) ShipEventsArgsForCall(i int) (map[string]interface{}, string) {
	fake.shipEventsMutex.RLock()
	defer fake.shipEventsMutex.RUnlock()
	return fake.shipEventsArgsForCall[i].arg1, fake.shipEventsArgsForCall[i].arg2
}

func (fake *FakeLogging) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	fake.shipEventsMutex.RLock()
	defer fake.shipEventsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLogging) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logging.Logging = new(FakeLogging)
